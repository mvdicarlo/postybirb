import { Rel } from '@mikro-orm/core';
import { EntityId, IEntity } from '../database/entity.interface';
import { IFileBuffer } from '../file/file-buffer.interface';
import { IFileDimensions } from '../file/file-dimensions.interface';
import { FileSubmissionMetadata } from './file-submission/file-submission-metadata.type';
import { ISubmissionFileProps } from './submission-file-props.interface';
import { ISubmission } from './submission.interface';

export type SubmissionFileId = EntityId;

/**
 * Represents a file attached to a submission for posting.
 *
 * @interface ISubmissionFile
 * @extends {IFileDimensions}
 * @extends {IEntity}
 */
export interface ISubmissionFile extends IFileDimensions, IEntity {
  /**
   * Parent submission.
   *
   * @type {ISubmission<FileSubmissionMetadata>}
   */
  submission: Rel<ISubmission<FileSubmissionMetadata>>;
  /**
   * Name of the file.
   *
   * @type {string}
   */
  fileName: string;
  /**
   * Hash of the file.
   *
   * @type {string}
   */
  hash: string;
  /**
   * Mime Type of the file.
   *
   * @type {string}
   */
  mimeType: string;
  /**
   * Reference to the buffer entity.
   *
   * @type {IFileBuffer}
   */
  file: IFileBuffer;
  /**
   * Optional thumbnail for the file.
   * Should be autogenerated if possible.
   *
   * @type {(IFileBuffer | undefined)}
   */
  thumbnail?: Rel<IFileBuffer>;
  /**
   * Alternate file to post instead of the main.
   * Primarily used for Text based submission.
   *
   * @type {(IFileBuffer | undefined)}
   */
  altFile?: Rel<IFileBuffer>;
  /**
   * Status flag for internal processing.
   *
   * @type {boolean}
   */
  hasThumbnail: boolean;
  /**
   * Additional props for modifying or tracking state
   * of the file.
   *
   * @type {ISubmissionFileProps}
   */
  props: ISubmissionFileProps;
}
