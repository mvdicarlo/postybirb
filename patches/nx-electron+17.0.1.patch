diff --git a/node_modules/nx-electron/src/utils/config.js b/node_modules/nx-electron/src/utils/config.js
index a3b95a5..73bb3ee 100644
--- a/node_modules/nx-electron/src/utils/config.js
+++ b/node_modules/nx-electron/src/utils/config.js
@@ -44,7 +44,7 @@ function getBaseWebpackPartial(options) {
                 {
                     test: /\.([jt])sx?$/,
                     loader: require.resolve(`ts-loader`),
-                    exclude: /node_modules/,
+                    // exclude: /node_modules/,
                     options: {
                         configFile: options.tsConfig,
                         transpileOnly: true,
diff --git a/node_modules/nx-electron/src/utils/electron.config.js b/node_modules/nx-electron/src/utils/electron.config.js
index b4c78b1..f3ccdf6 100644
--- a/node_modules/nx-electron/src/utils/electron.config.js
+++ b/node_modules/nx-electron/src/utils/electron.config.js
@@ -7,6 +7,7 @@ const webpack_merge_1 = require("webpack-merge");
 const webpack_node_externals_1 = tslib_1.__importDefault(require("webpack-node-externals"));
 const terser_webpack_plugin_1 = tslib_1.__importDefault(require("terser-webpack-plugin"));
 const config_1 = require("./config");
+const path = require("node:path");
 function getElectronPartial(options) {
     const webpackConfig = {
         output: {
@@ -48,6 +49,32 @@ function getElectronPartial(options) {
             webpackConfig.optimization = obfuscationOptimization;
         }
     }
+
+    const esmModules = ['node-fetch']
+    webpackConfig.externals = [
+        "electron",
+            function (context, callback) {
+                let resolved
+                try {
+                    resolved = require.resolve(context.request)
+                } catch (e) {
+                    resolved = path.resolve(context.context, context.request)
+                }
+
+                const isNodeModule = resolved.includes('node_modules');
+                const isESModule = esmModules.includes(context.request);
+                const bundle = isESModule || !isNodeModule
+                console.log({isESModule, isNodeModule, bundle}, resolved)
+                if (bundle) {
+                    // bundled
+                    return callback();
+                }
+                // not bundled
+                return callback(null, `commonjs ${resolved}`);
+            },
+    ]
+    return webpackConfig
+
     if (options.externalDependencies === 'all') {
         const modulesDir = `${devkit_1.workspaceRoot}/node_modules`;
         webpackConfig.externals = [(0, webpack_node_externals_1.default)({ modulesDir })];
@@ -55,6 +82,7 @@ function getElectronPartial(options) {
     else if (Array.isArray(options.externalDependencies)) {
         webpackConfig.externals = [
             function (context, callback) {
+                console.log(context.request)
                 if (options.externalDependencies.includes(context.request)) {
                     // not bundled
                     return callback(null, `commonjs ${context.request}`);
